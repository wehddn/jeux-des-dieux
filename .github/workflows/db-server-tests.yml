name: DB Server Tests

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: jeux_des_dieux_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
        tools: composer:v2
        coverage: xdebug

    - name: Copy environment file
      run: |
        cd db_server
        cp .env.example .env || echo "No .env.example found, creating basic .env"
        if [ ! -f .env ]; then
          cat > .env << EOF
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_NAME=jeux_des_dieux_test
        DB_USER=root
        DB_PASS=root
        JWT_SECRET=test_secret_key_for_github_actions
        EOF
        fi

    - name: Install dependencies
      run: |
        cd db_server
        composer install --prefer-dist --no-progress --no-suggest

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" --silent; do
          sleep 1
        done

    - name: Setup database
      run: |
        cd db_server
        mysql -h 127.0.0.1 -u root -proot jeux_des_dieux_test < sql/schema.sql

    - name: Seed test data
      run: |
        cd db_server
        # Hash the passwords using Argon2ID (like your production database)
        TEST_HASH=$(php -r "echo password_hash('12345', PASSWORD_ARGON2ID);")
        ADMIN_HASH=$(php -r "echo password_hash('admin', PASSWORD_ARGON2ID);")
        MANAGER_HASH=$(php -r "echo password_hash('manager', PASSWORD_ARGON2ID);")
        TEST2_HASH=$(php -r "echo password_hash('password123', PASSWORD_ARGON2ID);")
        FRIEND1_HASH=$(php -r "echo password_hash('password123', PASSWORD_ARGON2ID);")
        FRIEND2_HASH=$(php -r "echo password_hash('password123', PASSWORD_ARGON2ID);")
        FRIEND3_HASH=$(php -r "echo password_hash('password123', PASSWORD_ARGON2ID);")
        
        mysql -h 127.0.0.1 -u root -proot jeux_des_dieux_test -e "
        INSERT INTO users (id, name, email, password, photo, role_id) VALUES 
        (1, 'test1', 'test@test.test', '$TEST_HASH', 'photo_1.png', 1),
        (2, 'admin', 'admin@admin.admin', '$ADMIN_HASH', 'photo_1.png', 3),
        (11, 'manager', 'manager@manager.manager', '$MANAGER_HASH', 'photo_1.png', 2),
        (12, 'dont_block', 'test2@test2.test2', '$TEST2_HASH', 'photo_1.png', 1),
        (13, 'friend1', 'friend1@friend1.friend1', '$FRIEND1_HASH', 'photo_1.png', 1),
        (14, 'friend2', 'friend2@friend2.friend2', '$FRIEND2_HASH', 'photo_1.png', 1),
        (15, 'friend3', 'friend3@friend3.friend3', '$FRIEND3_HASH', 'photo_1.png', 1);
        "

    - name: Start PHP server
      run: |
        cd db_server
        # Start PHP server with error logging
        php -S localhost:5000 index.php > server.log 2>&1 &
        SERVER_PID=$!
        sleep 5
        echo "PHP server started on localhost:5000 (PID: $SERVER_PID)"
        
        # Test if server is responding
        curl -f http://localhost:5000/ || echo "Server health check failed"
        
        # Show any server errors
        if [ -f server.log ]; then
          echo "=== Server Log ==="
          cat server.log
          echo "=================="
        fi

    - name: Run tests
      run: |
        cd db_server
        # Show environment for debugging
        echo "=== Environment Check ==="
        echo "Database connection test..."
        php -r "
        try {
          \$pdo = new PDO('mysql:host=127.0.0.1;port=3306;dbname=jeux_des_dieux_test', 'root', 'root');
          echo 'Database connection: OK' . PHP_EOL;
          \$stmt = \$pdo->query('SELECT COUNT(*) as count FROM users');
          \$result = \$stmt->fetch();
          echo 'Users in database: ' . \$result['count'] . PHP_EOL;
        } catch (Exception \$e) {
          echo 'Database connection failed: ' . \$e->getMessage() . PHP_EOL;
        }
        "
        echo "=========================="
        
        # Run the actual tests
        php vendor/bin/phpunit tests --coverage-text --coverage-clover=coverage.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./db_server/coverage.xml
        flags: db_server
        name: db-server-coverage
        fail_ci_if_error: false
